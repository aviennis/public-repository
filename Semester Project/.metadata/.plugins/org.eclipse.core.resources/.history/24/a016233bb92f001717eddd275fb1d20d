import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import edu.yu.cs.dataStructures.fall2016.SimpleSQLParser.*;
import edu.yu.cs.dataStructures.fall2016.SimpleSQLParser.ColumnDescription.DataType;


public class Table {
	
	private String name;
	private ArrayList<DBEntry> rows;
	private int amountOfColumns;
	private DataType[] types;
	private Object[] defaultValue;
	private boolean[] unique;
	private boolean[] notNull;
	private String[] columnDescriptions;
	private boolean[] primaryKey;
	
	public Table(int columns, String name, ColumnDescription[] colTypes, ColumnDescription primary)
	{
		rows = new ArrayList<DBEntry>();
		amountOfColumns = columns;
		this.name = name;
		
		types = new DataType[amountOfColumns];
		defaultValue = new Object[amountOfColumns];
		unique = new boolean[amountOfColumns];
		notNull = new boolean[amountOfColumns];
		columnDescriptions = new String[amountOfColumns];
		primaryKey = new boolean[amountOfColumns];
		//fill our arrays with correct information about the table;
		int i = 0;
		for (ColumnDescription cd : colTypes)
		{
			types[i] = cd.getColumnType();
			if(cd.getHasDefault())
			{
				defaultValue[i] = stringToType(types[i], cd.getDefaultValue());
			}
			if(cd.isUnique())
			{
				unique[i] = true;
			}
			if(cd.isNotNull())
			{
				notNull[i] = true;
			}
			columnDescriptions[i] = cd.getColumnName();
			if(columnDescriptions[i].equals(primary))
			{
				primaryKey[i] = true;
			}
			i++;
		}
		
	}
	
	/**
	 * convert the value in string form to the correct data type
	 * @param type
	 * @param value
	 * @return
	 */
	private Object stringToType(DataType type, String value)
	{
		switch(type)
		{
			case INT:
				return Integer.parseInt(value);	
			case BOOLEAN:
				if(value.equals("true"))
				{
					return true;
				} else {return false;}
			case VARCHAR:
				return value;
			case DECIMAL:
				return Double.parseDouble(value);
			default:
				return null;

		}
		
	}
	
	public void addRow()
	{
		
	}
	
	public String getName()
	{
		return name;
	}

	
}
